{"version":3,"sources":["components/StationInfo.tsx","components/RouteSchedule.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteShape","styled","div","isStationPassed","RoutePoint","isFirstStation","isLastStation","StationLabel","isNotStation","StationInfo","map","station","alignment","padding","style","display","alignItems","justifyContent","width","flexWrap","marginRight","color","getDelayColor","arrivalDelay","getDelayString","getHoursAndMinutes","arrivalTime","departureDelay","departureTime","onClick","flyTo","center","coordinates","essential","stationName","ContentFadeInAnimation","keyframes","ContentContainer","RouteScheduleContainer","modalWidth","translateStyle","VehicleIcon","span","CloseIcon","HideIcon","isNotStop","stop","isPassed","time","timeToCompare","delayToCompare","RouteSchedule","vehicle","trackerLayer","setSelectedVehicle","useState","hideModal","setHideModal","className","prevState","selectedVehicleId","getSource","removeLayer","removeSource","backgroundColor","shortName","fontWeight","longName","fontSize","vehicleTypes","vehicleType","operator","marginTop","stations","index","key","stationId","currTime","length","App","setTrackerLayer","setMap","selectedVehicle","_setSelectedVehicle","selectedVehicleRef","useRef","newState","current","useEffect","TEST_API_KEY","a","fetch","then","res","json","fetchApiKey","mapboxMap","Map","container","zoom","addControl","NavigationControl","showCompass","dragRotate","disable","touchZoomRotate","disableRotation","tracker","TrajservLayer","url","apiKey","id","highlightTrajectory","api","fetchTrajectoryById","getParams","journeyId","getUTCTimeString","traj","multiLine","p","forEach","line","point","push","transformCoords","x","y","stationsCoords","addSource","type","data","properties","geometry","addLayer","source","paint","layout","catch","on","init","height","position","flex","tabIndex","top","right","zIndex","href","target","rel","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.6f8fab37.chunk.js","sourcesContent":["import {\r\n  getDelayString,\r\n  getHoursAndMinutes,\r\n} from 'mobility-toolbox-js/common/timeUtils';\r\nimport { getDelayColor } from 'mobility-toolbox-js/common/trackerConfig';\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RouteShape = styled.div`\r\n  width: 4px;\r\n  background-color: ${({ isStationPassed }) =>\r\n    isStationPassed ? 'white' : 'grey'};\r\n  align-self: stretch;\r\n  padding: 0;\r\n  margin: 0 5px 0 10px;\r\n  position: relative;\r\n`;\r\n\r\nconst RoutePoint = styled.div`\r\n  background-color: ${({ isStationPassed }) =>\r\n    isStationPassed ? '#fff' : 'grey'};\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  width: 12px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: ${({ isFirstStation, isLastStation }) => {\r\n    if (isFirstStation) {\r\n      return '0';\r\n    }\r\n    if (isLastStation) {\r\n      return '100%';\r\n    }\r\n    return '50%';\r\n  }};\r\n  transform: ${({ isFirstStation }) =>\r\n    isFirstStation ? 'translate(-50%,0)' : 'translate(-50%, -50%)'};\r\n`;\r\n\r\nconst StationLabel = styled.div`\r\n  cursor: pointer;\r\n  flex: 1;\r\n  padding: 0 5px;\r\n  border-radius: 2px;\r\n  color: ${({ isNotStation }) => (isNotStation ? 'grey' : 'white')};\r\n  :hover {\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n  }\r\n`;\r\n\r\nconst StationInfo = ({\r\n  map,\r\n  station,\r\n  isStationPassed,\r\n  isNotStation,\r\n  isFirstStation,\r\n  isLastStation,\r\n}) => {\r\n  let alignment = 'center',\r\n    padding = '5px 0';\r\n  if (isFirstStation) {\r\n    alignment = 'flex-start';\r\n    padding = '0 0 5px 0';\r\n  } else if (isLastStation) {\r\n    alignment = 'flex-end';\r\n    padding = '5px 0 0 0';\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: alignment,\r\n        justifyContent: 'flex-start',\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          width: '60px',\r\n          padding: padding,\r\n        }}\r\n      >\r\n        {!isFirstStation && !isNotStation ? (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'flex-end',\r\n              flexWrap: 'nowrap',\r\n            }}\r\n          >\r\n            {isStationPassed ? null : (\r\n              <span\r\n                style={{\r\n                  marginRight: '5px',\r\n                  color: getDelayColor(station.arrivalDelay),\r\n                }}\r\n              >\r\n                {station.arrivalDelay\r\n                  ? `+${getDelayString(station.arrivalDelay)}`\r\n                  : '+0'}\r\n              </span>\r\n            )}\r\n\r\n            <span>{getHoursAndMinutes(station.arrivalTime)}</span>\r\n          </div>\r\n        ) : null}\r\n        {!isLastStation && !isNotStation ? (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'flex-end',\r\n              flexWrap: 'nowrap',\r\n            }}\r\n          >\r\n            {isStationPassed ? null : (\r\n              <span\r\n                style={{\r\n                  marginRight: '5px',\r\n                  color: getDelayColor(station.arrivalDelay),\r\n                }}\r\n              >\r\n                {station.departureDelay && isStationPassed\r\n                  ? `+${getDelayString(station.departureDelay)}`\r\n                  : '+0'}\r\n              </span>\r\n            )}\r\n            <span>{getHoursAndMinutes(station.departureTime)}</span>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <RouteShape isStationPassed={isStationPassed}>\r\n        <RoutePoint\r\n          isFirstStation={isFirstStation}\r\n          isLastStation={isLastStation}\r\n          isStationPassed={isStationPassed}\r\n        />\r\n      </RouteShape>\r\n      <StationLabel\r\n        isNotStation={isNotStation}\r\n        onClick={() => {\r\n          map.flyTo({ center: station.coordinates, essential: true });\r\n        }}\r\n      >\r\n        {station.stationName}\r\n      </StationLabel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StationInfo;\r\n","import React, { useState } from 'react';\r\nimport StationInfo from './StationInfo';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { types as vehicleTypes } from 'mobility-toolbox-js/common/trackerConfig';\r\n\r\nconst ContentFadeInAnimation = keyframes`\r\nfrom{\r\n  opacity: 0;\r\n}\r\nto{\r\n  opacity: 1;\r\n}\r\n`;\r\n\r\nconst ContentContainer = styled.div`\r\n  opacity: 0;\r\n  animation-name: ${ContentFadeInAnimation};\r\n  animation-timing-function: ease;\r\n  animation-fill-mode: forwards;\r\n  animation-delay: 0.2s;\r\n  animation-duration: 1s;\r\n`;\r\n\r\nconst RouteScheduleContainer = styled.div`\r\n  position: absolute;\r\n  height: 100%;\r\n  width: ${({ modalWidth }) => modalWidth};\r\n  transform: ${({ translateStyle }) => translateStyle};\r\n  padding: ${({ modalWidth }) =>\r\n    modalWidth !== '0' ? '30px 20px 20px 20px' : ''};\r\n  overflow: auto;\r\n  overflow-x: hidden;\r\n  top: auto;\r\n  right: auto;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  z-index: 1000;\r\n  color: white;\r\n  transition: width 0.2s ease-in-out;\r\n`;\r\n\r\nconst VehicleIcon = styled.span`\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  min-width: 40px;\r\n  height: 40px;\r\n  border: solid black 2px;\r\n  display: inline-flex;\r\n  margin: 10px 15px 10px 0;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst CloseIcon = styled.span`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 10px;\r\n  width: 32px;\r\n  height: 32px;\r\n  opacity: 0.4;\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    left: 15px;\r\n    content: ' ';\r\n    height: 20px;\r\n    width: 2px;\r\n    background-color: white;\r\n  }\r\n  &:before {\r\n    transform: rotate(45deg);\r\n  }\r\n  &:after {\r\n    transform: rotate(-45deg);\r\n  }\r\n`;\r\n\r\nconst HideIcon = styled.div`\r\n  left: 10px;\r\n  top: 14px;\r\n  position: absolute;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  border-right: 4px solid white;\r\n  border-bottom: 4px solid white;\r\n  opacity: 0.4;\r\n  width: 10px;\r\n  height: 10px;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n  &.hideChevron {\r\n    transform: rotate(-225deg);\r\n  }\r\n  &.expandChevron {\r\n    transform: rotate(-45deg);\r\n  }\r\n`;\r\n\r\nconst isNotStop = (stop) => {\r\n  return !stop.arrivalTime && !stop.departureTime;\r\n};\r\n\r\nconst isPassed = (stop, time) => {\r\n  // Sometimes stop.departureDelay is undefined.\r\n  const timeToCompare = stop.departureTime || stop.arrivalTime || 0;\r\n  const delayToCompare = stop.departureDelay || stop.arrivalDelay || 0;\r\n  return !isNotStop(stop) && timeToCompare + delayToCompare <= time;\r\n};\r\n\r\nconst RouteSchedule = ({ map, vehicle, trackerLayer, setSelectedVehicle }) => {\r\n  const [hideModal, setHideModal] = useState<boolean>(false);\r\n  let modalWidth;\r\n  if (!vehicle) {\r\n    modalWidth = '0';\r\n  } else if (hideModal) {\r\n    modalWidth = '40px';\r\n  } else {\r\n    modalWidth = '350px';\r\n  }\r\n  const closeRouteSchedule = () => {\r\n    setSelectedVehicle(null);\r\n    trackerLayer.selectedVehicleId = null;\r\n    if (trackerLayer.map.getSource('routeLines')) {\r\n      trackerLayer.map.removeLayer('routeLines');\r\n      trackerLayer.map.removeSource('routeLines');\r\n    }\r\n    if (trackerLayer.map.getSource('routePoints')) {\r\n      trackerLayer.map.removeLayer('routePoints');\r\n      trackerLayer.map.removeSource('routePoints');\r\n    }\r\n  };\r\n  return (\r\n    <RouteScheduleContainer modalWidth={modalWidth}>\r\n      {modalWidth !== '0' ? (\r\n        <HideIcon\r\n          className={hideModal ? 'expandChevron' : 'hideChevron'}\r\n          onClick={() => setHideModal((prevState) => !prevState)}\r\n        ></HideIcon>\r\n      ) : null}\r\n      {modalWidth === '350px' ? (\r\n        <ContentContainer>\r\n          <CloseIcon onClick={closeRouteSchedule} />\r\n          <div style={{ display: 'flex' }}>\r\n            <VehicleIcon\r\n              style={{\r\n                backgroundColor: vehicle?.backgroundColor\r\n                  ? vehicle?.backgroundColor\r\n                  : 'white',\r\n                color: vehicle?.color ? vehicle?.color : 'black',\r\n              }}\r\n            >\r\n              {vehicle.shortName}\r\n            </VehicleIcon>\r\n            <div>\r\n              <div style={{ fontWeight: 'bold' }}>{vehicle.longName}</div>\r\n              <div style={{ fontSize: '14px' }}>\r\n                <div>{vehicle.shortName}</div>\r\n                <div>{vehicleTypes[vehicle.vehicleType]}</div>\r\n                <div>Operator: {vehicle.operator}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* operating info todo??? */}\r\n          <div style={{ marginTop: '20px' }}>\r\n            {vehicle.stations.map((station, index) => (\r\n              <StationInfo\r\n                map={map}\r\n                key={station.stationId}\r\n                station={station}\r\n                isStationPassed={isPassed(station, trackerLayer.currTime)}\r\n                isNotStation={isNotStop(station)}\r\n                isFirstStation={index === 0}\r\n                isLastStation={index === vehicle.stations.length - 1}\r\n              />\r\n            ))}\r\n          </div>\r\n        </ContentContainer>\r\n      ) : null}\r\n    </RouteScheduleContainer>\r\n  );\r\n};\r\nexport default RouteSchedule;\r\n","import { Map, NavigationControl } from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { getUTCTimeString } from 'mobility-toolbox-js/common/timeUtils';\r\nimport { TrajservLayer } from 'mobility-toolbox-js/mapbox';\r\nimport { transform as transformCoords } from 'ol/proj';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\nimport RouteSchedule from './components/RouteSchedule';\r\n\r\nconst App = () => {\r\n  const [trackerLayer, setTrackerLayer] = useState<any>(null);\r\n  const [map, setMap] = useState<any>(null);\r\n  const [selectedVehicle, _setSelectedVehicle] = useState<any>(null);\r\n  const selectedVehicleRef = useRef(selectedVehicle);\r\n  const setSelectedVehicle = (newState: any) => {\r\n    selectedVehicleRef.current = newState;\r\n    _setSelectedVehicle(newState);\r\n  };\r\n  useEffect(() => {\r\n    let TEST_API_KEY;\r\n    const fetchApiKey = async () => {\r\n      await fetch('https://developer.geops.io/publickey')\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          TEST_API_KEY = res.key;\r\n        });\r\n    };\r\n    fetchApiKey().then(() => {\r\n      const mapboxMap = new Map({\r\n        container: 'map',\r\n        style: `https://maps.geops.io/styles/travic/style.json?key=${TEST_API_KEY}`,\r\n        center: [21, 52.25],\r\n        zoom: 8,\r\n      });\r\n      mapboxMap.addControl(\r\n        new NavigationControl({\r\n          showCompass: false,\r\n        }),\r\n        'bottom-right'\r\n      );\r\n      mapboxMap.dragRotate.disable();\r\n      mapboxMap.touchZoomRotate.disableRotation();\r\n      const tracker = new TrajservLayer({\r\n        url: 'https://api.geops.io/tracker/v1',\r\n        apiKey: TEST_API_KEY,\r\n      });\r\n      tracker.onClick((vehicle) => {\r\n        if (!vehicle) {\r\n          setSelectedVehicle(null);\r\n          if (tracker.map.getSource('routeLines')) {\r\n            tracker.map.removeLayer('routeLines');\r\n            tracker.map.removeSource('routeLines');\r\n          }\r\n          if (tracker.map.getSource('routePoints')) {\r\n            tracker.map.removeLayer('routePoints');\r\n            tracker.map.removeSource('routePoints');\r\n          }\r\n        } else if (selectedVehicleRef?.current?.id !== vehicle?.id) {\r\n          setSelectedVehicle(vehicle);\r\n          tracker.highlightTrajectory = () => {\r\n            tracker.api\r\n              .fetchTrajectoryById(\r\n                tracker.getParams({\r\n                  id: tracker.journeyId,\r\n                  time: getUTCTimeString(tracker.currTime),\r\n                })\r\n              )\r\n              .then((traj) => {\r\n                const { p: multiLine } = traj;\r\n                const coordinates: any = [];\r\n                multiLine.forEach((line) => {\r\n                  line.forEach((point) => {\r\n                    coordinates.push(\r\n                      transformCoords(\r\n                        [point.x, point.y],\r\n                        'EPSG:3857',\r\n                        'EPSG:4326'\r\n                      )\r\n                    );\r\n                  });\r\n                });\r\n                if (tracker.map.getSource('routeLines')) {\r\n                  tracker.map.removeLayer('routeLines');\r\n                  tracker.map.removeSource('routeLines');\r\n                }\r\n                if (tracker.map.getSource('routePoints')) {\r\n                  tracker.map.removeLayer('routePoints');\r\n                  tracker.map.removeSource('routePoints');\r\n                }\r\n                const stationsCoords = tracker.stationsCoords.map((station) =>\r\n                  transformCoords(\r\n                    [station[0], station[1]],\r\n                    'EPSG:3857',\r\n                    'EPSG:4326'\r\n                  )\r\n                );\r\n                if (stationsCoords) {\r\n                  tracker.map.addSource('routePoints', {\r\n                    type: 'geojson',\r\n                    data: {\r\n                      type: 'Feature',\r\n                      properties: {},\r\n                      geometry: {\r\n                        type: 'MultiPoint',\r\n                        coordinates: stationsCoords,\r\n                      },\r\n                    },\r\n                  });\r\n                  tracker.map.addLayer(\r\n                    {\r\n                      id: 'routePoints',\r\n                      type: 'circle',\r\n                      source: 'routePoints',\r\n                      paint: {\r\n                        'circle-radius': 6,\r\n                        // 'circle-stroke-color': 'black',\r\n                        // 'circle-stroke-width': 1,\r\n                        'circle-color': vehicle.backgroundColor\r\n                          ? vehicle.backgroundColor\r\n                          : '#888',\r\n                      },\r\n                    },\r\n                    tracker.key\r\n                  );\r\n                }\r\n                if (coordinates) {\r\n                  tracker.map.addSource('routeLines', {\r\n                    type: 'geojson',\r\n                    data: {\r\n                      type: 'Feature',\r\n                      properties: {},\r\n                      geometry: {\r\n                        type: 'LineString',\r\n                        coordinates,\r\n                      },\r\n                    },\r\n                  });\r\n                  tracker.map.addLayer(\r\n                    {\r\n                      id: 'routeLines',\r\n                      type: 'line',\r\n                      source: 'routeLines',\r\n                      layout: {\r\n                        'line-join': 'round',\r\n                        'line-cap': 'round',\r\n                      },\r\n                      paint: {\r\n                        'line-color': vehicle.backgroundColor\r\n                          ? vehicle.backgroundColor\r\n                          : '#888',\r\n                        'line-width': 5,\r\n                      },\r\n                    },\r\n                    'routePoints'\r\n                  );\r\n                }\r\n              })\r\n              .catch(() => {});\r\n          };\r\n          tracker.highlightTrajectory();\r\n        }\r\n      });\r\n      setTrackerLayer(tracker);\r\n      mapboxMap.on('load', () => {\r\n        tracker.init(mapboxMap, 'waterway-name');\r\n      });\r\n      setMap(mapboxMap);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          height: '100vh',\r\n          width: '100vw',\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <RouteSchedule\r\n          map={map}\r\n          trackerLayer={trackerLayer}\r\n          vehicle={selectedVehicle}\r\n          setSelectedVehicle={setSelectedVehicle}\r\n        ></RouteSchedule>\r\n        <div id='map' style={{ flex: 1 }} tabIndex={0}></div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: '10px',\r\n          right: '10px',\r\n          display: 'block',\r\n          width: '300px',\r\n          zIndex: 1000,\r\n        }}\r\n      >\r\n        <a\r\n          href='./assets/system_transportowy.pdf'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          <img\r\n            style={{\r\n              height: '66px',\r\n            }}\r\n            src='./assets/logo2.png'\r\n            alt=''\r\n          />\r\n        </a>\r\n        <a\r\n          href='https://www.gispartner.pl/'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          <img\r\n            style={{\r\n              height: '50px',\r\n            }}\r\n            src='./assets/logo1.png'\r\n            alt=''\r\n          />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}