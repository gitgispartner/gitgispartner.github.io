{"version":3,"sources":["components/StationInfo.tsx","components/RouteSchedule.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteShape","styled","div","isStationPassed","StationLabel","isNotStation","StationInfo","station","isFirstStation","isLastStation","arrivalTime","departureTime","style","display","alignItems","width","padding","stationName","RouteScheduleContainer","isNotStop","stop","isPassed","time","timeToCompare","delayToCompare","departureDelay","arrivalDelay","RouteSchedule","vehicle","trackerLayer","destination","longName","marginTop","stations","map","index","key","stationId","currTime","length","getHoursAndMinutes","App","useState","setTrackerLayer","selectedVehicle","_setSelectedVehicle","selectedVehicleRef","useRef","setSelectedVehicle","newState","current","useEffect","TEST_API_KEY","Map","container","center","zoom","tracker","TrajservLayer","url","apiKey","onClick","getSource","removeLayer","removeSource","id","api","fetchTrajectoryById","getParams","journeyId","getUTCTimeString","Date","then","traj","multiLine","p","coordinates","forEach","line","point","push","transformCoords","x","y","addSource","type","data","properties","geometry","addLayer","source","layout","paint","backgroundColor","on","init","height","flex","tabIndex","position","top","right","zIndex","href","target","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51afd5c4.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst RouteShape = styled.div`\n  width: 5px;\n  background-color: ${({ isStationPassed }) =>\n    isStationPassed ? 'black' : 'grey'};\n  align-self: stretch;\n  margin: 0 10px;\n`;\n\nconst StationLabel = styled.div`\n  color: ${({ isNotStation }) => (isNotStation ? 'grey' : 'black')};\n`;\nconst StationInfo = ({\n  station,\n  isStationPassed,\n  isNotStation,\n  isFirstStation,\n  isLastStation,\n  arrivalTime,\n  departureTime,\n}) => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <div style={{ width: '42px', padding: '5px 0' }}>\n        {!isFirstStation ? <div>{arrivalTime}</div> : null}\n        {!isLastStation ? <div>{departureTime}</div> : null}\n      </div>\n      <RouteShape isStationPassed={isStationPassed} />\n      <StationLabel isNotStation={isNotStation}>\n        {station.stationName}\n      </StationLabel>\n    </div>\n  );\n};\n\nexport default StationInfo;\n","import React from 'react';\nimport StationInfo from './StationInfo';\nimport {\n  getHoursAndMinutes,\n  //getDelayString,\n} from 'mobility-toolbox-js/common/timeUtils';\nimport styled from 'styled-components';\n\nconst RouteScheduleContainer = styled.div`\n  height: 100%;\n  padding: 10px;\n  overflow: auto;\n`;\n\nconst isNotStop = (stop) => {\n  return !stop.arrivalTime && !stop.departureTime;\n};\n\nconst isPassed = (stop, time) => {\n  // Sometimes stop.departureDelay is undefined.\n  const timeToCompare = stop.departureTime || stop.arrivalTime || 0;\n  const delayToCompare = stop.departureDelay || stop.arrivalDelay || 0;\n  return !isNotStop(stop) && timeToCompare + delayToCompare <= time;\n};\n\nconst RouteSchedule = ({ vehicle, trackerLayer }) => {\n  return (\n    <RouteScheduleContainer>\n      <div>{vehicle.destination}</div>\n      <div>{vehicle.longName}</div>\n      <div style={{ marginTop: '20px' }}>\n        {vehicle.stations.map((station, index) => (\n          <StationInfo\n            key={station.stationId}\n            station={station}\n            isStationPassed={isPassed(station, trackerLayer.currTime)}\n            isNotStation={isNotStop(station)}\n            isFirstStation={index === 0}\n            isLastStation={index === vehicle.stations.length - 1}\n            arrivalTime={getHoursAndMinutes(station.arrivalTime)}\n            departureTime={getHoursAndMinutes(station.departureTime)}\n          />\n        ))}\n      </div>\n    </RouteScheduleContainer>\n  );\n};\nexport default RouteSchedule;\n","import { Map } from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { getUTCTimeString } from \"mobility-toolbox-js/common/timeUtils\";\nimport { TrajservLayer } from \"mobility-toolbox-js/mapbox\";\nimport { transform as transformCoords } from \"ol/proj\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport RouteSchedule from \"./components/RouteSchedule\";\n\nconst App = () => {\n  const [trackerLayer, setTrackerLayer] = useState<any>(null);\n  const [selectedVehicle, _setSelectedVehicle] = useState<any>(null);\n  const selectedVehicleRef = useRef(selectedVehicle);\n  const setSelectedVehicle = (newState: any) => {\n    selectedVehicleRef.current = newState;\n    _setSelectedVehicle(newState);\n  };\n  useEffect(() => {\n    const TEST_API_KEY =\n      \"5cc87b12d7c5370001c1d655dc2238655d5c4099bbbadfd75f44cb34\";\n    const map = new Map({\n      container: \"map\",\n      style: `https://maps.geops.io/styles/travic/style.json?key=${TEST_API_KEY}`,\n      center: [21, 52.25],\n      zoom: 8,\n    });\n\n    const tracker = new TrajservLayer({\n      url: \"https://api.geops.io/tracker/v1\",\n      apiKey: TEST_API_KEY,\n    });\n    tracker.onClick((vehicle) => {\n      if (map.getSource(\"route\")) {\n        map.removeLayer(\"route\");\n        map.removeSource(\"route\");\n      }\n      if (selectedVehicleRef?.current?.id === vehicle?.id || !vehicle) {\n        setSelectedVehicle(null);\n      } else {\n        setSelectedVehicle(vehicle);\n        tracker.api\n          .fetchTrajectoryById(\n            tracker.getParams({\n              id: tracker.journeyId,\n              time: getUTCTimeString(new Date()),\n            })\n          )\n          .then((traj) => {\n            const { p: multiLine } = traj;\n            const coordinates: any = [];\n            multiLine.forEach((line) => {\n              line.forEach((point) => {\n                coordinates.push(\n                  transformCoords([point.x, point.y], \"EPSG:3857\", \"EPSG:4326\")\n                );\n              });\n            });\n            map.addSource(\"route\", {\n              type: \"geojson\",\n              data: {\n                type: \"Feature\",\n                properties: {},\n                geometry: {\n                  type: \"LineString\",\n                  coordinates,\n                },\n              },\n            });\n            map.addLayer({\n              id: \"route\",\n              type: \"line\",\n              source: \"route\",\n              layout: {\n                \"line-join\": \"round\",\n                \"line-cap\": \"round\",\n              },\n              paint: {\n                \"line-color\": vehicle.backgroundColor\n                  ? vehicle.backgroundColor\n                  : \"#888\",\n                \"line-width\": 5,\n              },\n            });\n          });\n      }\n    });\n    setTrackerLayer(tracker);\n    map.on(\"load\", () => {\n      tracker.init(map, \"waterway-name\");\n    });\n  }, []);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          height: \"100vh\",\n          width: \"100vw\",\n        }}\n      >\n        {selectedVehicle ? (\n          <RouteSchedule\n            trackerLayer={trackerLayer}\n            vehicle={selectedVehicle}\n          ></RouteSchedule>\n        ) : null}\n        <div id=\"map\" style={{ flex: 1 }} tabIndex={0}></div>\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          display: \"block\",\n          width: \"300px\",\n          zIndex: 1000,\n        }}\n      >\n        <a href=\"./assets/system_transportowy.pdf\" target=\"_blank\">\n          <img\n            style={{\n              height: \"66px\",\n            }}\n            src=\"./assets/logo2.png\"\n            alt=\"\"\n          />\n        </a>\n        <a href=\"https://www.gispartner.pl/\" target=\"_blank\">\n          <img\n            style={{\n              height: \"50px\",\n            }}\n            src=\"./assets/logo1.png\"\n            alt=\"\"\n          />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}