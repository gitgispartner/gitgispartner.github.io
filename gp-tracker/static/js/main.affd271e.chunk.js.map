{"version":3,"sources":["components/StationInfo.tsx","components/RouteSchedule.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteShape","styled","div","isStationPassed","StationLabel","isNotStation","StationInfo","station","isFirstStation","isLastStation","arrivalTime","departureTime","style","display","alignItems","width","padding","stationName","RouteScheduleContainer","isNotStop","stop","isPassed","time","timeToCompare","delayToCompare","departureDelay","arrivalDelay","RouteSchedule","vehicle","trackerLayer","destination","longName","marginTop","stations","map","index","key","stationId","currTime","length","getHoursAndMinutes","App","useState","setTrackerLayer","selectedVehicle","_setSelectedVehicle","selectedVehicleRef","useRef","setSelectedVehicle","newState","current","useEffect","TEST_API_KEY","a","fetch","then","res","json","fetchApiKey","Map","container","center","zoom","tracker","TrajservLayer","url","apiKey","onClick","getSource","removeLayer","removeSource","id","api","fetchTrajectoryById","getParams","journeyId","getUTCTimeString","Date","traj","multiLine","p","coordinates","forEach","line","point","push","transformCoords","x","y","addSource","type","data","properties","geometry","addLayer","source","layout","paint","backgroundColor","on","init","height","flex","tabIndex","position","top","right","zIndex","href","target","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.affd271e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RouteShape = styled.div`\r\n  width: 5px;\r\n  background-color: ${({ isStationPassed }) =>\r\n    isStationPassed ? 'black' : 'grey'};\r\n  align-self: stretch;\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst StationLabel = styled.div`\r\n  color: ${({ isNotStation }) => (isNotStation ? 'grey' : 'black')};\r\n`;\r\nconst StationInfo = ({\r\n  station,\r\n  isStationPassed,\r\n  isNotStation,\r\n  isFirstStation,\r\n  isLastStation,\r\n  arrivalTime,\r\n  departureTime,\r\n}) => {\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n      <div style={{ width: '42px', padding: '5px 0' }}>\r\n        {!isFirstStation ? <div>{arrivalTime}</div> : null}\r\n        {!isLastStation ? <div>{departureTime}</div> : null}\r\n      </div>\r\n      <RouteShape isStationPassed={isStationPassed} />\r\n      <StationLabel isNotStation={isNotStation}>\r\n        {station.stationName}\r\n      </StationLabel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StationInfo;\r\n","import React from 'react';\r\nimport StationInfo from './StationInfo';\r\nimport {\r\n  getHoursAndMinutes,\r\n  //getDelayString,\r\n} from 'mobility-toolbox-js/common/timeUtils';\r\nimport styled from 'styled-components';\r\n\r\nconst RouteScheduleContainer = styled.div`\r\n  height: 100%;\r\n  padding: 10px;\r\n  overflow: auto;\r\n`;\r\n\r\nconst isNotStop = (stop) => {\r\n  return !stop.arrivalTime && !stop.departureTime;\r\n};\r\n\r\nconst isPassed = (stop, time) => {\r\n  // Sometimes stop.departureDelay is undefined.\r\n  const timeToCompare = stop.departureTime || stop.arrivalTime || 0;\r\n  const delayToCompare = stop.departureDelay || stop.arrivalDelay || 0;\r\n  return !isNotStop(stop) && timeToCompare + delayToCompare <= time;\r\n};\r\n\r\nconst RouteSchedule = ({ vehicle, trackerLayer }) => {\r\n  return (\r\n    <RouteScheduleContainer>\r\n      <div>{vehicle.destination}</div>\r\n      <div>{vehicle.longName}</div>\r\n      <div style={{ marginTop: '20px' }}>\r\n        {vehicle.stations.map((station, index) => (\r\n          <StationInfo\r\n            key={station.stationId}\r\n            station={station}\r\n            isStationPassed={isPassed(station, trackerLayer.currTime)}\r\n            isNotStation={isNotStop(station)}\r\n            isFirstStation={index === 0}\r\n            isLastStation={index === vehicle.stations.length - 1}\r\n            arrivalTime={getHoursAndMinutes(station.arrivalTime)}\r\n            departureTime={getHoursAndMinutes(station.departureTime)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </RouteScheduleContainer>\r\n  );\r\n};\r\nexport default RouteSchedule;\r\n","import { Map } from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { getUTCTimeString } from 'mobility-toolbox-js/common/timeUtils';\r\nimport { TrajservLayer } from 'mobility-toolbox-js/mapbox';\r\nimport { transform as transformCoords } from 'ol/proj';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './App.css';\r\nimport RouteSchedule from './components/RouteSchedule';\r\n\r\nconst App = () => {\r\n  const [trackerLayer, setTrackerLayer] = useState<any>(null);\r\n  const [selectedVehicle, _setSelectedVehicle] = useState<any>(null);\r\n  const selectedVehicleRef = useRef(selectedVehicle);\r\n  const setSelectedVehicle = (newState: any) => {\r\n    selectedVehicleRef.current = newState;\r\n    _setSelectedVehicle(newState);\r\n  };\r\n  useEffect(() => {\r\n    let TEST_API_KEY;\r\n    const fetchApiKey = async () => {\r\n      await fetch('https://developer.geops.io/publickey')\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          TEST_API_KEY = res.key;\r\n        });\r\n    };\r\n    fetchApiKey().then(() => {\r\n      const map = new Map({\r\n        container: 'map',\r\n        style: `https://maps.geops.io/styles/travic/style.json?key=${TEST_API_KEY}`,\r\n        center: [21, 52.25],\r\n        zoom: 8,\r\n      });\r\n      const tracker = new TrajservLayer({\r\n        url: 'https://api.geops.io/tracker/v1',\r\n        apiKey: TEST_API_KEY,\r\n      });\r\n      tracker.onClick((vehicle) => {\r\n        if (map.getSource('route')) {\r\n          map.removeLayer('route');\r\n          map.removeSource('route');\r\n        }\r\n        if (selectedVehicleRef?.current?.id === vehicle?.id || !vehicle) {\r\n          setSelectedVehicle(null);\r\n        } else {\r\n          setSelectedVehicle(vehicle);\r\n          tracker.api\r\n            .fetchTrajectoryById(\r\n              tracker.getParams({\r\n                id: tracker.journeyId,\r\n                time: getUTCTimeString(new Date()),\r\n              })\r\n            )\r\n            .then((traj) => {\r\n              const { p: multiLine } = traj;\r\n              const coordinates: any = [];\r\n              multiLine.forEach((line) => {\r\n                line.forEach((point) => {\r\n                  coordinates.push(\r\n                    transformCoords(\r\n                      [point.x, point.y],\r\n                      'EPSG:3857',\r\n                      'EPSG:4326'\r\n                    )\r\n                  );\r\n                });\r\n              });\r\n              map.addSource('route', {\r\n                type: 'geojson',\r\n                data: {\r\n                  type: 'Feature',\r\n                  properties: {},\r\n                  geometry: {\r\n                    type: 'LineString',\r\n                    coordinates,\r\n                  },\r\n                },\r\n              });\r\n              map.addLayer({\r\n                id: 'route',\r\n                type: 'line',\r\n                source: 'route',\r\n                layout: {\r\n                  'line-join': 'round',\r\n                  'line-cap': 'round',\r\n                },\r\n                paint: {\r\n                  'line-color': vehicle.backgroundColor\r\n                    ? vehicle.backgroundColor\r\n                    : '#888',\r\n                  'line-width': 5,\r\n                },\r\n              });\r\n            });\r\n        }\r\n      });\r\n      setTrackerLayer(tracker);\r\n      map.on('load', () => {\r\n        tracker.init(map, 'waterway-name');\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          height: '100vh',\r\n          width: '100vw',\r\n        }}\r\n      >\r\n        {selectedVehicle ? (\r\n          <RouteSchedule\r\n            trackerLayer={trackerLayer}\r\n            vehicle={selectedVehicle}\r\n          ></RouteSchedule>\r\n        ) : null}\r\n        <div id='map' style={{ flex: 1 }} tabIndex={0}></div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: '10px',\r\n          right: '10px',\r\n          display: 'block',\r\n          width: '300px',\r\n          zIndex: 1000,\r\n        }}\r\n      >\r\n        <a href='./assets/system_transportowy.pdf' target='_blank'>\r\n          <img\r\n            style={{\r\n              height: '66px',\r\n            }}\r\n            src='./assets/logo2.png'\r\n            alt=''\r\n          />\r\n        </a>\r\n        <a href='https://www.gispartner.pl/' target='_blank'>\r\n          <img\r\n            style={{\r\n              height: '50px',\r\n            }}\r\n            src='./assets/logo1.png'\r\n            alt=''\r\n          />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}